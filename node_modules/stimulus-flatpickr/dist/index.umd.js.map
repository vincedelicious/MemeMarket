{"version":3,"file":"index.umd.js","sources":["../node_modules/@hotwired/stimulus/dist/stimulus.js","../src/utils.js","../src/config_options.js","../src/events.js","../src/elements.js","../src/strftime_mapping.js","../src/index.js"],"sourcesContent":["/*\nStimulus 3.0.0\nCopyright Â© 2021 Basecamp, LLC\n */\nclass EventListener {\n    constructor(eventTarget, eventName, eventOptions) {\n        this.eventTarget = eventTarget;\n        this.eventName = eventName;\n        this.eventOptions = eventOptions;\n        this.unorderedBindings = new Set();\n    }\n    connect() {\n        this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n    }\n    disconnect() {\n        this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n    }\n    bindingConnected(binding) {\n        this.unorderedBindings.add(binding);\n    }\n    bindingDisconnected(binding) {\n        this.unorderedBindings.delete(binding);\n    }\n    handleEvent(event) {\n        const extendedEvent = extendEvent(event);\n        for (const binding of this.bindings) {\n            if (extendedEvent.immediatePropagationStopped) {\n                break;\n            }\n            else {\n                binding.handleEvent(extendedEvent);\n            }\n        }\n    }\n    get bindings() {\n        return Array.from(this.unorderedBindings).sort((left, right) => {\n            const leftIndex = left.index, rightIndex = right.index;\n            return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n        });\n    }\n}\nfunction extendEvent(event) {\n    if (\"immediatePropagationStopped\" in event) {\n        return event;\n    }\n    else {\n        const { stopImmediatePropagation } = event;\n        return Object.assign(event, {\n            immediatePropagationStopped: false,\n            stopImmediatePropagation() {\n                this.immediatePropagationStopped = true;\n                stopImmediatePropagation.call(this);\n            }\n        });\n    }\n}\n\nclass Dispatcher {\n    constructor(application) {\n        this.application = application;\n        this.eventListenerMaps = new Map;\n        this.started = false;\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.eventListeners.forEach(eventListener => eventListener.connect());\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.started = false;\n            this.eventListeners.forEach(eventListener => eventListener.disconnect());\n        }\n    }\n    get eventListeners() {\n        return Array.from(this.eventListenerMaps.values())\n            .reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);\n    }\n    bindingConnected(binding) {\n        this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n    }\n    bindingDisconnected(binding) {\n        this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n    }\n    handleError(error, message, detail = {}) {\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    fetchEventListenerForBinding(binding) {\n        const { eventTarget, eventName, eventOptions } = binding;\n        return this.fetchEventListener(eventTarget, eventName, eventOptions);\n    }\n    fetchEventListener(eventTarget, eventName, eventOptions) {\n        const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n        const cacheKey = this.cacheKey(eventName, eventOptions);\n        let eventListener = eventListenerMap.get(cacheKey);\n        if (!eventListener) {\n            eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n            eventListenerMap.set(cacheKey, eventListener);\n        }\n        return eventListener;\n    }\n    createEventListener(eventTarget, eventName, eventOptions) {\n        const eventListener = new EventListener(eventTarget, eventName, eventOptions);\n        if (this.started) {\n            eventListener.connect();\n        }\n        return eventListener;\n    }\n    fetchEventListenerMapForEventTarget(eventTarget) {\n        let eventListenerMap = this.eventListenerMaps.get(eventTarget);\n        if (!eventListenerMap) {\n            eventListenerMap = new Map;\n            this.eventListenerMaps.set(eventTarget, eventListenerMap);\n        }\n        return eventListenerMap;\n    }\n    cacheKey(eventName, eventOptions) {\n        const parts = [eventName];\n        Object.keys(eventOptions).sort().forEach(key => {\n            parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`);\n        });\n        return parts.join(\":\");\n    }\n}\n\nconst descriptorPattern = /^((.+?)(@(window|document))?->)?(.+?)(#([^:]+?))(:(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n    const source = descriptorString.trim();\n    const matches = source.match(descriptorPattern) || [];\n    return {\n        eventTarget: parseEventTarget(matches[4]),\n        eventName: matches[2],\n        eventOptions: matches[9] ? parseEventOptions(matches[9]) : {},\n        identifier: matches[5],\n        methodName: matches[7]\n    };\n}\nfunction parseEventTarget(eventTargetName) {\n    if (eventTargetName == \"window\") {\n        return window;\n    }\n    else if (eventTargetName == \"document\") {\n        return document;\n    }\n}\nfunction parseEventOptions(eventOptions) {\n    return eventOptions.split(\":\").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, \"\")]: !/^!/.test(token) }), {});\n}\nfunction stringifyEventTarget(eventTarget) {\n    if (eventTarget == window) {\n        return \"window\";\n    }\n    else if (eventTarget == document) {\n        return \"document\";\n    }\n}\n\nfunction camelize(value) {\n    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());\n}\nfunction capitalize(value) {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);\n}\nfunction tokenize(value) {\n    return value.match(/[^\\s]+/g) || [];\n}\n\nclass Action {\n    constructor(element, index, descriptor) {\n        this.element = element;\n        this.index = index;\n        this.eventTarget = descriptor.eventTarget || element;\n        this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\");\n        this.eventOptions = descriptor.eventOptions || {};\n        this.identifier = descriptor.identifier || error(\"missing identifier\");\n        this.methodName = descriptor.methodName || error(\"missing method name\");\n    }\n    static forToken(token) {\n        return new this(token.element, token.index, parseActionDescriptorString(token.content));\n    }\n    toString() {\n        const eventNameSuffix = this.eventTargetName ? `@${this.eventTargetName}` : \"\";\n        return `${this.eventName}${eventNameSuffix}->${this.identifier}#${this.methodName}`;\n    }\n    get params() {\n        if (this.eventTarget instanceof Element) {\n            return this.getParamsFromEventTargetAttributes(this.eventTarget);\n        }\n        else {\n            return {};\n        }\n    }\n    getParamsFromEventTargetAttributes(eventTarget) {\n        const params = {};\n        const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`);\n        const attributes = Array.from(eventTarget.attributes);\n        attributes.forEach(({ name, value }) => {\n            const match = name.match(pattern);\n            const key = match && match[1];\n            if (key) {\n                Object.assign(params, { [camelize(key)]: typecast(value) });\n            }\n        });\n        return params;\n    }\n    get eventTargetName() {\n        return stringifyEventTarget(this.eventTarget);\n    }\n}\nconst defaultEventNames = {\n    \"a\": e => \"click\",\n    \"button\": e => \"click\",\n    \"form\": e => \"submit\",\n    \"input\": e => e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\",\n    \"select\": e => \"change\",\n    \"textarea\": e => \"input\"\n};\nfunction getDefaultEventNameForElement(element) {\n    const tagName = element.tagName.toLowerCase();\n    if (tagName in defaultEventNames) {\n        return defaultEventNames[tagName](element);\n    }\n}\nfunction error(message) {\n    throw new Error(message);\n}\nfunction typecast(value) {\n    try {\n        return JSON.parse(value);\n    }\n    catch (o_O) {\n        return value;\n    }\n}\n\nclass Binding {\n    constructor(context, action) {\n        this.context = context;\n        this.action = action;\n    }\n    get index() {\n        return this.action.index;\n    }\n    get eventTarget() {\n        return this.action.eventTarget;\n    }\n    get eventOptions() {\n        return this.action.eventOptions;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    handleEvent(event) {\n        if (this.willBeInvokedByEvent(event)) {\n            this.invokeWithEvent(event);\n        }\n    }\n    get eventName() {\n        return this.action.eventName;\n    }\n    get method() {\n        const method = this.controller[this.methodName];\n        if (typeof method == \"function\") {\n            return method;\n        }\n        throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`);\n    }\n    invokeWithEvent(event) {\n        const { target, currentTarget } = event;\n        try {\n            const { params } = this.action;\n            const actionEvent = Object.assign(event, { params });\n            this.method.call(this.controller, actionEvent);\n            this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });\n        }\n        catch (error) {\n            const { identifier, controller, element, index } = this;\n            const detail = { identifier, controller, element, index, event };\n            this.context.handleError(error, `invoking action \"${this.action}\"`, detail);\n        }\n    }\n    willBeInvokedByEvent(event) {\n        const eventTarget = event.target;\n        if (this.element === eventTarget) {\n            return true;\n        }\n        else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n            return this.scope.containsElement(eventTarget);\n        }\n        else {\n            return this.scope.containsElement(this.action.element);\n        }\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    get methodName() {\n        return this.action.methodName;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nclass ElementObserver {\n    constructor(element, delegate) {\n        this.element = element;\n        this.started = false;\n        this.delegate = delegate;\n        this.elements = new Set;\n        this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, { attributes: true, childList: true, subtree: true });\n            this.refresh();\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            const matches = new Set(this.matchElementsInTree());\n            for (const element of Array.from(this.elements)) {\n                if (!matches.has(element)) {\n                    this.removeElement(element);\n                }\n            }\n            for (const element of Array.from(matches)) {\n                this.addElement(element);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        if (mutation.type == \"attributes\") {\n            this.processAttributeChange(mutation.target, mutation.attributeName);\n        }\n        else if (mutation.type == \"childList\") {\n            this.processRemovedNodes(mutation.removedNodes);\n            this.processAddedNodes(mutation.addedNodes);\n        }\n    }\n    processAttributeChange(node, attributeName) {\n        const element = node;\n        if (this.elements.has(element)) {\n            if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n                this.delegate.elementAttributeChanged(element, attributeName);\n            }\n            else {\n                this.removeElement(element);\n            }\n        }\n        else if (this.matchElement(element)) {\n            this.addElement(element);\n        }\n    }\n    processRemovedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element) {\n                this.processTree(element, this.removeElement);\n            }\n        }\n    }\n    processAddedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element && this.elementIsActive(element)) {\n                this.processTree(element, this.addElement);\n            }\n        }\n    }\n    matchElement(element) {\n        return this.delegate.matchElement(element);\n    }\n    matchElementsInTree(tree = this.element) {\n        return this.delegate.matchElementsInTree(tree);\n    }\n    processTree(tree, processor) {\n        for (const element of this.matchElementsInTree(tree)) {\n            processor.call(this, element);\n        }\n    }\n    elementFromNode(node) {\n        if (node.nodeType == Node.ELEMENT_NODE) {\n            return node;\n        }\n    }\n    elementIsActive(element) {\n        if (element.isConnected != this.element.isConnected) {\n            return false;\n        }\n        else {\n            return this.element.contains(element);\n        }\n    }\n    addElement(element) {\n        if (!this.elements.has(element)) {\n            if (this.elementIsActive(element)) {\n                this.elements.add(element);\n                if (this.delegate.elementMatched) {\n                    this.delegate.elementMatched(element);\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        if (this.elements.has(element)) {\n            this.elements.delete(element);\n            if (this.delegate.elementUnmatched) {\n                this.delegate.elementUnmatched(element);\n            }\n        }\n    }\n}\n\nclass AttributeObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeName = attributeName;\n        this.delegate = delegate;\n        this.elementObserver = new ElementObserver(element, this);\n    }\n    get element() {\n        return this.elementObserver.element;\n    }\n    get selector() {\n        return `[${this.attributeName}]`;\n    }\n    start() {\n        this.elementObserver.start();\n    }\n    stop() {\n        this.elementObserver.stop();\n    }\n    refresh() {\n        this.elementObserver.refresh();\n    }\n    get started() {\n        return this.elementObserver.started;\n    }\n    matchElement(element) {\n        return element.hasAttribute(this.attributeName);\n    }\n    matchElementsInTree(tree) {\n        const match = this.matchElement(tree) ? [tree] : [];\n        const matches = Array.from(tree.querySelectorAll(this.selector));\n        return match.concat(matches);\n    }\n    elementMatched(element) {\n        if (this.delegate.elementMatchedAttribute) {\n            this.delegate.elementMatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementUnmatched(element) {\n        if (this.delegate.elementUnmatchedAttribute) {\n            this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementAttributeChanged(element, attributeName) {\n        if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n            this.delegate.elementAttributeValueChanged(element, attributeName);\n        }\n    }\n}\n\nclass StringMapObserver {\n    constructor(element, delegate) {\n        this.element = element;\n        this.delegate = delegate;\n        this.started = false;\n        this.stringMap = new Map;\n        this.mutationObserver = new MutationObserver(mutations => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });\n            this.refresh();\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            for (const attributeName of this.knownAttributeNames) {\n                this.refreshAttribute(attributeName, null);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        const attributeName = mutation.attributeName;\n        if (attributeName) {\n            this.refreshAttribute(attributeName, mutation.oldValue);\n        }\n    }\n    refreshAttribute(attributeName, oldValue) {\n        const key = this.delegate.getStringMapKeyForAttribute(attributeName);\n        if (key != null) {\n            if (!this.stringMap.has(attributeName)) {\n                this.stringMapKeyAdded(key, attributeName);\n            }\n            const value = this.element.getAttribute(attributeName);\n            if (this.stringMap.get(attributeName) != value) {\n                this.stringMapValueChanged(value, key, oldValue);\n            }\n            if (value == null) {\n                const oldValue = this.stringMap.get(attributeName);\n                this.stringMap.delete(attributeName);\n                if (oldValue)\n                    this.stringMapKeyRemoved(key, attributeName, oldValue);\n            }\n            else {\n                this.stringMap.set(attributeName, value);\n            }\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        if (this.delegate.stringMapKeyAdded) {\n            this.delegate.stringMapKeyAdded(key, attributeName);\n        }\n    }\n    stringMapValueChanged(value, key, oldValue) {\n        if (this.delegate.stringMapValueChanged) {\n            this.delegate.stringMapValueChanged(value, key, oldValue);\n        }\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        if (this.delegate.stringMapKeyRemoved) {\n            this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n        }\n    }\n    get knownAttributeNames() {\n        return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n    }\n    get currentAttributeNames() {\n        return Array.from(this.element.attributes).map(attribute => attribute.name);\n    }\n    get recordedAttributeNames() {\n        return Array.from(this.stringMap.keys());\n    }\n}\n\nfunction add(map, key, value) {\n    fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n    fetch(map, key).delete(value);\n    prune(map, key);\n}\nfunction fetch(map, key) {\n    let values = map.get(key);\n    if (!values) {\n        values = new Set();\n        map.set(key, values);\n    }\n    return values;\n}\nfunction prune(map, key) {\n    const values = map.get(key);\n    if (values != null && values.size == 0) {\n        map.delete(key);\n    }\n}\n\nclass Multimap {\n    constructor() {\n        this.valuesByKey = new Map();\n    }\n    get keys() {\n        return Array.from(this.valuesByKey.keys());\n    }\n    get values() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((values, set) => values.concat(Array.from(set)), []);\n    }\n    get size() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((size, set) => size + set.size, 0);\n    }\n    add(key, value) {\n        add(this.valuesByKey, key, value);\n    }\n    delete(key, value) {\n        del(this.valuesByKey, key, value);\n    }\n    has(key, value) {\n        const values = this.valuesByKey.get(key);\n        return values != null && values.has(value);\n    }\n    hasKey(key) {\n        return this.valuesByKey.has(key);\n    }\n    hasValue(value) {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.some(set => set.has(value));\n    }\n    getValuesForKey(key) {\n        const values = this.valuesByKey.get(key);\n        return values ? Array.from(values) : [];\n    }\n    getKeysForValue(value) {\n        return Array.from(this.valuesByKey)\n            .filter(([key, values]) => values.has(value))\n            .map(([key, values]) => key);\n    }\n}\n\nclass IndexedMultimap extends Multimap {\n    constructor() {\n        super();\n        this.keysByValue = new Map;\n    }\n    get values() {\n        return Array.from(this.keysByValue.keys());\n    }\n    add(key, value) {\n        super.add(key, value);\n        add(this.keysByValue, value, key);\n    }\n    delete(key, value) {\n        super.delete(key, value);\n        del(this.keysByValue, value, key);\n    }\n    hasValue(value) {\n        return this.keysByValue.has(value);\n    }\n    getKeysForValue(value) {\n        const set = this.keysByValue.get(value);\n        return set ? Array.from(set) : [];\n    }\n}\n\nclass TokenListObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeObserver = new AttributeObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.tokensByElement = new Multimap;\n    }\n    get started() {\n        return this.attributeObserver.started;\n    }\n    start() {\n        this.attributeObserver.start();\n    }\n    stop() {\n        this.attributeObserver.stop();\n    }\n    refresh() {\n        this.attributeObserver.refresh();\n    }\n    get element() {\n        return this.attributeObserver.element;\n    }\n    get attributeName() {\n        return this.attributeObserver.attributeName;\n    }\n    elementMatchedAttribute(element) {\n        this.tokensMatched(this.readTokensForElement(element));\n    }\n    elementAttributeValueChanged(element) {\n        const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);\n        this.tokensUnmatched(unmatchedTokens);\n        this.tokensMatched(matchedTokens);\n    }\n    elementUnmatchedAttribute(element) {\n        this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n    }\n    tokensMatched(tokens) {\n        tokens.forEach(token => this.tokenMatched(token));\n    }\n    tokensUnmatched(tokens) {\n        tokens.forEach(token => this.tokenUnmatched(token));\n    }\n    tokenMatched(token) {\n        this.delegate.tokenMatched(token);\n        this.tokensByElement.add(token.element, token);\n    }\n    tokenUnmatched(token) {\n        this.delegate.tokenUnmatched(token);\n        this.tokensByElement.delete(token.element, token);\n    }\n    refreshTokensForElement(element) {\n        const previousTokens = this.tokensByElement.getValuesForKey(element);\n        const currentTokens = this.readTokensForElement(element);\n        const firstDifferingIndex = zip(previousTokens, currentTokens)\n            .findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));\n        if (firstDifferingIndex == -1) {\n            return [[], []];\n        }\n        else {\n            return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n        }\n    }\n    readTokensForElement(element) {\n        const attributeName = this.attributeName;\n        const tokenString = element.getAttribute(attributeName) || \"\";\n        return parseTokenString(tokenString, element, attributeName);\n    }\n}\nfunction parseTokenString(tokenString, element, attributeName) {\n    return tokenString.trim().split(/\\s+/).filter(content => content.length)\n        .map((content, index) => ({ element, attributeName, content, index }));\n}\nfunction zip(left, right) {\n    const length = Math.max(left.length, right.length);\n    return Array.from({ length }, (_, index) => [left[index], right[index]]);\n}\nfunction tokensAreEqual(left, right) {\n    return left && right && left.index == right.index && left.content == right.content;\n}\n\nclass ValueListObserver {\n    constructor(element, attributeName, delegate) {\n        this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.parseResultsByToken = new WeakMap;\n        this.valuesByTokenByElement = new WeakMap;\n    }\n    get started() {\n        return this.tokenListObserver.started;\n    }\n    start() {\n        this.tokenListObserver.start();\n    }\n    stop() {\n        this.tokenListObserver.stop();\n    }\n    refresh() {\n        this.tokenListObserver.refresh();\n    }\n    get element() {\n        return this.tokenListObserver.element;\n    }\n    get attributeName() {\n        return this.tokenListObserver.attributeName;\n    }\n    tokenMatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).set(token, value);\n            this.delegate.elementMatchedValue(element, value);\n        }\n    }\n    tokenUnmatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).delete(token);\n            this.delegate.elementUnmatchedValue(element, value);\n        }\n    }\n    fetchParseResultForToken(token) {\n        let parseResult = this.parseResultsByToken.get(token);\n        if (!parseResult) {\n            parseResult = this.parseToken(token);\n            this.parseResultsByToken.set(token, parseResult);\n        }\n        return parseResult;\n    }\n    fetchValuesByTokenForElement(element) {\n        let valuesByToken = this.valuesByTokenByElement.get(element);\n        if (!valuesByToken) {\n            valuesByToken = new Map;\n            this.valuesByTokenByElement.set(element, valuesByToken);\n        }\n        return valuesByToken;\n    }\n    parseToken(token) {\n        try {\n            const value = this.delegate.parseValueForToken(token);\n            return { value };\n        }\n        catch (error) {\n            return { error };\n        }\n    }\n}\n\nclass BindingObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.bindingsByAction = new Map;\n    }\n    start() {\n        if (!this.valueListObserver) {\n            this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n            this.valueListObserver.start();\n        }\n    }\n    stop() {\n        if (this.valueListObserver) {\n            this.valueListObserver.stop();\n            delete this.valueListObserver;\n            this.disconnectAllActions();\n        }\n    }\n    get element() {\n        return this.context.element;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    get actionAttribute() {\n        return this.schema.actionAttribute;\n    }\n    get schema() {\n        return this.context.schema;\n    }\n    get bindings() {\n        return Array.from(this.bindingsByAction.values());\n    }\n    connectAction(action) {\n        const binding = new Binding(this.context, action);\n        this.bindingsByAction.set(action, binding);\n        this.delegate.bindingConnected(binding);\n    }\n    disconnectAction(action) {\n        const binding = this.bindingsByAction.get(action);\n        if (binding) {\n            this.bindingsByAction.delete(action);\n            this.delegate.bindingDisconnected(binding);\n        }\n    }\n    disconnectAllActions() {\n        this.bindings.forEach(binding => this.delegate.bindingDisconnected(binding));\n        this.bindingsByAction.clear();\n    }\n    parseValueForToken(token) {\n        const action = Action.forToken(token);\n        if (action.identifier == this.identifier) {\n            return action;\n        }\n    }\n    elementMatchedValue(element, action) {\n        this.connectAction(action);\n    }\n    elementUnmatchedValue(element, action) {\n        this.disconnectAction(action);\n    }\n}\n\nclass ValueObserver {\n    constructor(context, receiver) {\n        this.context = context;\n        this.receiver = receiver;\n        this.stringMapObserver = new StringMapObserver(this.element, this);\n        this.valueDescriptorMap = this.controller.valueDescriptorMap;\n        this.invokeChangedCallbacksForDefaultValues();\n    }\n    start() {\n        this.stringMapObserver.start();\n    }\n    stop() {\n        this.stringMapObserver.stop();\n    }\n    get element() {\n        return this.context.element;\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    getStringMapKeyForAttribute(attributeName) {\n        if (attributeName in this.valueDescriptorMap) {\n            return this.valueDescriptorMap[attributeName].name;\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        const descriptor = this.valueDescriptorMap[attributeName];\n        if (!this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n        }\n    }\n    stringMapValueChanged(value, name, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[name];\n        if (value === null)\n            return;\n        if (oldValue === null) {\n            oldValue = descriptor.writer(descriptor.defaultValue);\n        }\n        this.invokeChangedCallback(name, value, oldValue);\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[key];\n        if (this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n        }\n        else {\n            this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n        }\n    }\n    invokeChangedCallbacksForDefaultValues() {\n        for (const { key, name, defaultValue, writer } of this.valueDescriptors) {\n            if (defaultValue != undefined && !this.controller.data.has(key)) {\n                this.invokeChangedCallback(name, writer(defaultValue), undefined);\n            }\n        }\n    }\n    invokeChangedCallback(name, rawValue, rawOldValue) {\n        const changedMethodName = `${name}Changed`;\n        const changedMethod = this.receiver[changedMethodName];\n        if (typeof changedMethod == \"function\") {\n            const descriptor = this.valueDescriptorNameMap[name];\n            const value = descriptor.reader(rawValue);\n            let oldValue = rawOldValue;\n            if (rawOldValue) {\n                oldValue = descriptor.reader(rawOldValue);\n            }\n            changedMethod.call(this.receiver, value, oldValue);\n        }\n    }\n    get valueDescriptors() {\n        const { valueDescriptorMap } = this;\n        return Object.keys(valueDescriptorMap).map(key => valueDescriptorMap[key]);\n    }\n    get valueDescriptorNameMap() {\n        const descriptors = {};\n        Object.keys(this.valueDescriptorMap).forEach(key => {\n            const descriptor = this.valueDescriptorMap[key];\n            descriptors[descriptor.name] = descriptor;\n        });\n        return descriptors;\n    }\n    hasValue(attributeName) {\n        const descriptor = this.valueDescriptorNameMap[attributeName];\n        const hasMethodName = `has${capitalize(descriptor.name)}`;\n        return this.receiver[hasMethodName];\n    }\n}\n\nclass TargetObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.targetsByName = new Multimap;\n    }\n    start() {\n        if (!this.tokenListObserver) {\n            this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n            this.tokenListObserver.start();\n        }\n    }\n    stop() {\n        if (this.tokenListObserver) {\n            this.disconnectAllTargets();\n            this.tokenListObserver.stop();\n            delete this.tokenListObserver;\n        }\n    }\n    tokenMatched({ element, content: name }) {\n        if (this.scope.containsElement(element)) {\n            this.connectTarget(element, name);\n        }\n    }\n    tokenUnmatched({ element, content: name }) {\n        this.disconnectTarget(element, name);\n    }\n    connectTarget(element, name) {\n        if (!this.targetsByName.has(name, element)) {\n            this.targetsByName.add(name, element);\n            this.delegate.targetConnected(element, name);\n        }\n    }\n    disconnectTarget(element, name) {\n        if (this.targetsByName.has(name, element)) {\n            this.targetsByName.delete(name, element);\n            this.delegate.targetDisconnected(element, name);\n        }\n    }\n    disconnectAllTargets() {\n        for (const name of this.targetsByName.keys) {\n            for (const element of this.targetsByName.getValuesForKey(name)) {\n                this.disconnectTarget(element, name);\n            }\n        }\n    }\n    get attributeName() {\n        return `data-${this.context.identifier}-target`;\n    }\n    get element() {\n        return this.context.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nclass Context {\n    constructor(module, scope) {\n        this.logDebugActivity = (functionName, detail = {}) => {\n            const { identifier, controller, element } = this;\n            detail = Object.assign({ identifier, controller, element }, detail);\n            this.application.logDebugActivity(this.identifier, functionName, detail);\n        };\n        this.module = module;\n        this.scope = scope;\n        this.controller = new module.controllerConstructor(this);\n        this.bindingObserver = new BindingObserver(this, this.dispatcher);\n        this.valueObserver = new ValueObserver(this, this.controller);\n        this.targetObserver = new TargetObserver(this, this);\n        try {\n            this.controller.initialize();\n            this.logDebugActivity(\"initialize\");\n        }\n        catch (error) {\n            this.handleError(error, \"initializing controller\");\n        }\n    }\n    connect() {\n        this.bindingObserver.start();\n        this.valueObserver.start();\n        this.targetObserver.start();\n        try {\n            this.controller.connect();\n            this.logDebugActivity(\"connect\");\n        }\n        catch (error) {\n            this.handleError(error, \"connecting controller\");\n        }\n    }\n    disconnect() {\n        try {\n            this.controller.disconnect();\n            this.logDebugActivity(\"disconnect\");\n        }\n        catch (error) {\n            this.handleError(error, \"disconnecting controller\");\n        }\n        this.targetObserver.stop();\n        this.valueObserver.stop();\n        this.bindingObserver.stop();\n    }\n    get application() {\n        return this.module.application;\n    }\n    get identifier() {\n        return this.module.identifier;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get dispatcher() {\n        return this.application.dispatcher;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get parentElement() {\n        return this.element.parentElement;\n    }\n    handleError(error, message, detail = {}) {\n        const { identifier, controller, element } = this;\n        detail = Object.assign({ identifier, controller, element }, detail);\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    targetConnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetConnected`, element);\n    }\n    targetDisconnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetDisconnected`, element);\n    }\n    invokeControllerMethod(methodName, ...args) {\n        const controller = this.controller;\n        if (typeof controller[methodName] == \"function\") {\n            controller[methodName](...args);\n        }\n    }\n}\n\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return Array.from(ancestors.reduce((values, constructor) => {\n        getOwnStaticArrayValues(constructor, propertyName).forEach(name => values.add(name));\n        return values;\n    }, new Set));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return ancestors.reduce((pairs, constructor) => {\n        pairs.push(...getOwnStaticObjectPairs(constructor, propertyName));\n        return pairs;\n    }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n    const ancestors = [];\n    while (constructor) {\n        ancestors.push(constructor);\n        constructor = Object.getPrototypeOf(constructor);\n    }\n    return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return definition ? Object.keys(definition).map(key => [key, definition[key]]) : [];\n}\n\nfunction bless(constructor) {\n    return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n    const shadowConstructor = extend(constructor);\n    const shadowProperties = getShadowProperties(constructor.prototype, properties);\n    Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n    return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n    const blessings = readInheritableStaticArrayValues(constructor, \"blessings\");\n    return blessings.reduce((blessedProperties, blessing) => {\n        const properties = blessing(constructor);\n        for (const key in properties) {\n            const descriptor = blessedProperties[key] || {};\n            blessedProperties[key] = Object.assign(descriptor, properties[key]);\n        }\n        return blessedProperties;\n    }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n    return getOwnKeys(properties).reduce((shadowProperties, key) => {\n        const descriptor = getShadowedDescriptor(prototype, properties, key);\n        if (descriptor) {\n            Object.assign(shadowProperties, { [key]: descriptor });\n        }\n        return shadowProperties;\n    }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n    const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor;\n    if (!shadowedByValue) {\n        const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n        if (shadowingDescriptor) {\n            descriptor.get = shadowingDescriptor.get || descriptor.get;\n            descriptor.set = shadowingDescriptor.set || descriptor.set;\n        }\n        return descriptor;\n    }\n}\nconst getOwnKeys = (() => {\n    if (typeof Object.getOwnPropertySymbols == \"function\") {\n        return (object) => [\n            ...Object.getOwnPropertyNames(object),\n            ...Object.getOwnPropertySymbols(object)\n        ];\n    }\n    else {\n        return Object.getOwnPropertyNames;\n    }\n})();\nconst extend = (() => {\n    function extendWithReflect(constructor) {\n        function extended() {\n            return Reflect.construct(constructor, arguments, new.target);\n        }\n        extended.prototype = Object.create(constructor.prototype, {\n            constructor: { value: extended }\n        });\n        Reflect.setPrototypeOf(extended, constructor);\n        return extended;\n    }\n    function testReflectExtension() {\n        const a = function () { this.a.call(this); };\n        const b = extendWithReflect(a);\n        b.prototype.a = function () { };\n        return new b;\n    }\n    try {\n        testReflectExtension();\n        return extendWithReflect;\n    }\n    catch (error) {\n        return (constructor) => class extended extends constructor {\n        };\n    }\n})();\n\nfunction blessDefinition(definition) {\n    return {\n        identifier: definition.identifier,\n        controllerConstructor: bless(definition.controllerConstructor)\n    };\n}\n\nclass Module {\n    constructor(application, definition) {\n        this.application = application;\n        this.definition = blessDefinition(definition);\n        this.contextsByScope = new WeakMap;\n        this.connectedContexts = new Set;\n    }\n    get identifier() {\n        return this.definition.identifier;\n    }\n    get controllerConstructor() {\n        return this.definition.controllerConstructor;\n    }\n    get contexts() {\n        return Array.from(this.connectedContexts);\n    }\n    connectContextForScope(scope) {\n        const context = this.fetchContextForScope(scope);\n        this.connectedContexts.add(context);\n        context.connect();\n    }\n    disconnectContextForScope(scope) {\n        const context = this.contextsByScope.get(scope);\n        if (context) {\n            this.connectedContexts.delete(context);\n            context.disconnect();\n        }\n    }\n    fetchContextForScope(scope) {\n        let context = this.contextsByScope.get(scope);\n        if (!context) {\n            context = new Context(this, scope);\n            this.contextsByScope.set(scope, context);\n        }\n        return context;\n    }\n}\n\nclass ClassMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    has(name) {\n        return this.data.has(this.getDataKey(name));\n    }\n    get(name) {\n        return this.getAll(name)[0];\n    }\n    getAll(name) {\n        const tokenString = this.data.get(this.getDataKey(name)) || \"\";\n        return tokenize(tokenString);\n    }\n    getAttributeName(name) {\n        return this.data.getAttributeNameForKey(this.getDataKey(name));\n    }\n    getDataKey(name) {\n        return `${name}-class`;\n    }\n    get data() {\n        return this.scope.data;\n    }\n}\n\nclass DataMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.getAttribute(name);\n    }\n    set(key, value) {\n        const name = this.getAttributeNameForKey(key);\n        this.element.setAttribute(name, value);\n        return this.get(key);\n    }\n    has(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.hasAttribute(name);\n    }\n    delete(key) {\n        if (this.has(key)) {\n            const name = this.getAttributeNameForKey(key);\n            this.element.removeAttribute(name);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getAttributeNameForKey(key) {\n        return `data-${this.identifier}-${dasherize(key)}`;\n    }\n}\n\nclass Guide {\n    constructor(logger) {\n        this.warnedKeysByObject = new WeakMap;\n        this.logger = logger;\n    }\n    warn(object, key, message) {\n        let warnedKeys = this.warnedKeysByObject.get(object);\n        if (!warnedKeys) {\n            warnedKeys = new Set;\n            this.warnedKeysByObject.set(object, warnedKeys);\n        }\n        if (!warnedKeys.has(key)) {\n            warnedKeys.add(key);\n            this.logger.warn(message, object);\n        }\n    }\n}\n\nfunction attributeValueContainsToken(attributeName, token) {\n    return `[${attributeName}~=\"${token}\"]`;\n}\n\nclass TargetSet {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get schema() {\n        return this.scope.schema;\n    }\n    has(targetName) {\n        return this.find(targetName) != null;\n    }\n    find(...targetNames) {\n        return targetNames.reduce((target, targetName) => target\n            || this.findTarget(targetName)\n            || this.findLegacyTarget(targetName), undefined);\n    }\n    findAll(...targetNames) {\n        return targetNames.reduce((targets, targetName) => [\n            ...targets,\n            ...this.findAllTargets(targetName),\n            ...this.findAllLegacyTargets(targetName)\n        ], []);\n    }\n    findTarget(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findElement(selector);\n    }\n    findAllTargets(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector);\n    }\n    getSelectorForTargetName(targetName) {\n        const attributeName = this.schema.targetAttributeForScope(this.identifier);\n        return attributeValueContainsToken(attributeName, targetName);\n    }\n    findLegacyTarget(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.deprecate(this.scope.findElement(selector), targetName);\n    }\n    findAllLegacyTargets(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector).map(element => this.deprecate(element, targetName));\n    }\n    getLegacySelectorForTargetName(targetName) {\n        const targetDescriptor = `${this.identifier}.${targetName}`;\n        return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n    }\n    deprecate(element, targetName) {\n        if (element) {\n            const { identifier } = this;\n            const attributeName = this.schema.targetAttribute;\n            const revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n            this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` +\n                `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);\n        }\n        return element;\n    }\n    get guide() {\n        return this.scope.guide;\n    }\n}\n\nclass Scope {\n    constructor(schema, element, identifier, logger) {\n        this.targets = new TargetSet(this);\n        this.classes = new ClassMap(this);\n        this.data = new DataMap(this);\n        this.containsElement = (element) => {\n            return element.closest(this.controllerSelector) === this.element;\n        };\n        this.schema = schema;\n        this.element = element;\n        this.identifier = identifier;\n        this.guide = new Guide(logger);\n    }\n    findElement(selector) {\n        return this.element.matches(selector)\n            ? this.element\n            : this.queryElements(selector).find(this.containsElement);\n    }\n    findAllElements(selector) {\n        return [\n            ...this.element.matches(selector) ? [this.element] : [],\n            ...this.queryElements(selector).filter(this.containsElement)\n        ];\n    }\n    queryElements(selector) {\n        return Array.from(this.element.querySelectorAll(selector));\n    }\n    get controllerSelector() {\n        return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    }\n}\n\nclass ScopeObserver {\n    constructor(element, schema, delegate) {\n        this.element = element;\n        this.schema = schema;\n        this.delegate = delegate;\n        this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n        this.scopesByIdentifierByElement = new WeakMap;\n        this.scopeReferenceCounts = new WeakMap;\n    }\n    start() {\n        this.valueListObserver.start();\n    }\n    stop() {\n        this.valueListObserver.stop();\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    parseValueForToken(token) {\n        const { element, content: identifier } = token;\n        const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n        let scope = scopesByIdentifier.get(identifier);\n        if (!scope) {\n            scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n            scopesByIdentifier.set(identifier, scope);\n        }\n        return scope;\n    }\n    elementMatchedValue(element, value) {\n        const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n        this.scopeReferenceCounts.set(value, referenceCount);\n        if (referenceCount == 1) {\n            this.delegate.scopeConnected(value);\n        }\n    }\n    elementUnmatchedValue(element, value) {\n        const referenceCount = this.scopeReferenceCounts.get(value);\n        if (referenceCount) {\n            this.scopeReferenceCounts.set(value, referenceCount - 1);\n            if (referenceCount == 1) {\n                this.delegate.scopeDisconnected(value);\n            }\n        }\n    }\n    fetchScopesByIdentifierForElement(element) {\n        let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n        if (!scopesByIdentifier) {\n            scopesByIdentifier = new Map;\n            this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n        }\n        return scopesByIdentifier;\n    }\n}\n\nclass Router {\n    constructor(application) {\n        this.application = application;\n        this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n        this.scopesByIdentifier = new Multimap;\n        this.modulesByIdentifier = new Map;\n    }\n    get element() {\n        return this.application.element;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get logger() {\n        return this.application.logger;\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    get modules() {\n        return Array.from(this.modulesByIdentifier.values());\n    }\n    get contexts() {\n        return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);\n    }\n    start() {\n        this.scopeObserver.start();\n    }\n    stop() {\n        this.scopeObserver.stop();\n    }\n    loadDefinition(definition) {\n        this.unloadIdentifier(definition.identifier);\n        const module = new Module(this.application, definition);\n        this.connectModule(module);\n    }\n    unloadIdentifier(identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            this.disconnectModule(module);\n        }\n    }\n    getContextForElementAndIdentifier(element, identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            return module.contexts.find(context => context.element == element);\n        }\n    }\n    handleError(error, message, detail) {\n        this.application.handleError(error, message, detail);\n    }\n    createScopeForElementAndIdentifier(element, identifier) {\n        return new Scope(this.schema, element, identifier, this.logger);\n    }\n    scopeConnected(scope) {\n        this.scopesByIdentifier.add(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.connectContextForScope(scope);\n        }\n    }\n    scopeDisconnected(scope) {\n        this.scopesByIdentifier.delete(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.disconnectContextForScope(scope);\n        }\n    }\n    connectModule(module) {\n        this.modulesByIdentifier.set(module.identifier, module);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach(scope => module.connectContextForScope(scope));\n    }\n    disconnectModule(module) {\n        this.modulesByIdentifier.delete(module.identifier);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach(scope => module.disconnectContextForScope(scope));\n    }\n}\n\nconst defaultSchema = {\n    controllerAttribute: \"data-controller\",\n    actionAttribute: \"data-action\",\n    targetAttribute: \"data-target\",\n    targetAttributeForScope: identifier => `data-${identifier}-target`\n};\n\nclass Application {\n    constructor(element = document.documentElement, schema = defaultSchema) {\n        this.logger = console;\n        this.debug = false;\n        this.logDebugActivity = (identifier, functionName, detail = {}) => {\n            if (this.debug) {\n                this.logFormattedMessage(identifier, functionName, detail);\n            }\n        };\n        this.element = element;\n        this.schema = schema;\n        this.dispatcher = new Dispatcher(this);\n        this.router = new Router(this);\n    }\n    static start(element, schema) {\n        const application = new Application(element, schema);\n        application.start();\n        return application;\n    }\n    async start() {\n        await domReady();\n        this.logDebugActivity(\"application\", \"starting\");\n        this.dispatcher.start();\n        this.router.start();\n        this.logDebugActivity(\"application\", \"start\");\n    }\n    stop() {\n        this.logDebugActivity(\"application\", \"stopping\");\n        this.dispatcher.stop();\n        this.router.stop();\n        this.logDebugActivity(\"application\", \"stop\");\n    }\n    register(identifier, controllerConstructor) {\n        if (controllerConstructor.shouldLoad) {\n            this.load({ identifier, controllerConstructor });\n        }\n    }\n    load(head, ...rest) {\n        const definitions = Array.isArray(head) ? head : [head, ...rest];\n        definitions.forEach(definition => this.router.loadDefinition(definition));\n    }\n    unload(head, ...rest) {\n        const identifiers = Array.isArray(head) ? head : [head, ...rest];\n        identifiers.forEach(identifier => this.router.unloadIdentifier(identifier));\n    }\n    get controllers() {\n        return this.router.contexts.map(context => context.controller);\n    }\n    getControllerForElementAndIdentifier(element, identifier) {\n        const context = this.router.getContextForElementAndIdentifier(element, identifier);\n        return context ? context.controller : null;\n    }\n    handleError(error, message, detail) {\n        var _a;\n        this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail);\n        (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, \"\", 0, 0, error);\n    }\n    logFormattedMessage(identifier, functionName, detail = {}) {\n        detail = Object.assign({ application: this }, detail);\n        this.logger.groupCollapsed(`${identifier} #${functionName}`);\n        this.logger.log(\"details:\", Object.assign({}, detail));\n        this.logger.groupEnd();\n    }\n}\nfunction domReady() {\n    return new Promise(resolve => {\n        if (document.readyState == \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", () => resolve());\n        }\n        else {\n            resolve();\n        }\n    });\n}\n\nfunction ClassPropertiesBlessing(constructor) {\n    const classes = readInheritableStaticArrayValues(constructor, \"classes\");\n    return classes.reduce((properties, classDefinition) => {\n        return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n    }, {});\n}\nfunction propertiesForClassDefinition(key) {\n    return {\n        [`${key}Class`]: {\n            get() {\n                const { classes } = this;\n                if (classes.has(key)) {\n                    return classes.get(key);\n                }\n                else {\n                    const attribute = classes.getAttributeName(key);\n                    throw new Error(`Missing attribute \"${attribute}\"`);\n                }\n            }\n        },\n        [`${key}Classes`]: {\n            get() {\n                return this.classes.getAll(key);\n            }\n        },\n        [`has${capitalize(key)}Class`]: {\n            get() {\n                return this.classes.has(key);\n            }\n        }\n    };\n}\n\nfunction TargetPropertiesBlessing(constructor) {\n    const targets = readInheritableStaticArrayValues(constructor, \"targets\");\n    return targets.reduce((properties, targetDefinition) => {\n        return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n    }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n    return {\n        [`${name}Target`]: {\n            get() {\n                const target = this.targets.find(name);\n                if (target) {\n                    return target;\n                }\n                else {\n                    throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`);\n                }\n            }\n        },\n        [`${name}Targets`]: {\n            get() {\n                return this.targets.findAll(name);\n            }\n        },\n        [`has${capitalize(name)}Target`]: {\n            get() {\n                return this.targets.has(name);\n            }\n        }\n    };\n}\n\nfunction ValuePropertiesBlessing(constructor) {\n    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n    const propertyDescriptorMap = {\n        valueDescriptorMap: {\n            get() {\n                return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n                    const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair);\n                    const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);\n                    return Object.assign(result, { [attributeName]: valueDescriptor });\n                }, {});\n            }\n        }\n    };\n    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n        return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n    }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair) {\n    const definition = parseValueDefinitionPair(valueDefinitionPair);\n    const { key, name, reader: read, writer: write } = definition;\n    return {\n        [name]: {\n            get() {\n                const value = this.data.get(key);\n                if (value !== null) {\n                    return read(value);\n                }\n                else {\n                    return definition.defaultValue;\n                }\n            },\n            set(value) {\n                if (value === undefined) {\n                    this.data.delete(key);\n                }\n                else {\n                    this.data.set(key, write(value));\n                }\n            }\n        },\n        [`has${capitalize(name)}`]: {\n            get() {\n                return this.data.has(key) || definition.hasCustomDefaultValue;\n            }\n        }\n    };\n}\nfunction parseValueDefinitionPair([token, typeDefinition]) {\n    return valueDescriptorForTokenAndTypeDefinition(token, typeDefinition);\n}\nfunction parseValueTypeConstant(constant) {\n    switch (constant) {\n        case Array: return \"array\";\n        case Boolean: return \"boolean\";\n        case Number: return \"number\";\n        case Object: return \"object\";\n        case String: return \"string\";\n    }\n}\nfunction parseValueTypeDefault(defaultValue) {\n    switch (typeof defaultValue) {\n        case \"boolean\": return \"boolean\";\n        case \"number\": return \"number\";\n        case \"string\": return \"string\";\n    }\n    if (Array.isArray(defaultValue))\n        return \"array\";\n    if (Object.prototype.toString.call(defaultValue) === \"[object Object]\")\n        return \"object\";\n}\nfunction parseValueTypeObject(typeObject) {\n    const typeFromObject = parseValueTypeConstant(typeObject.type);\n    if (typeFromObject) {\n        const defaultValueType = parseValueTypeDefault(typeObject.default);\n        if (typeFromObject !== defaultValueType) {\n            throw new Error(`Type \"${typeFromObject}\" must match the type of the default value. Given default value: \"${typeObject.default}\" as \"${defaultValueType}\"`);\n        }\n        return typeFromObject;\n    }\n}\nfunction parseValueTypeDefinition(typeDefinition) {\n    const typeFromObject = parseValueTypeObject(typeDefinition);\n    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n    const typeFromConstant = parseValueTypeConstant(typeDefinition);\n    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n    if (type)\n        return type;\n    throw new Error(`Unknown value type \"${typeDefinition}\"`);\n}\nfunction defaultValueForDefinition(typeDefinition) {\n    const constant = parseValueTypeConstant(typeDefinition);\n    if (constant)\n        return defaultValuesByType[constant];\n    const defaultValue = typeDefinition.default;\n    if (defaultValue !== undefined)\n        return defaultValue;\n    return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(token, typeDefinition) {\n    const key = `${dasherize(token)}-value`;\n    const type = parseValueTypeDefinition(typeDefinition);\n    return {\n        type,\n        key,\n        name: camelize(key),\n        get defaultValue() { return defaultValueForDefinition(typeDefinition); },\n        get hasCustomDefaultValue() { return parseValueTypeDefault(typeDefinition) !== undefined; },\n        reader: readers[type],\n        writer: writers[type] || writers.default\n    };\n}\nconst defaultValuesByType = {\n    get array() { return []; },\n    boolean: false,\n    number: 0,\n    get object() { return {}; },\n    string: \"\"\n};\nconst readers = {\n    array(value) {\n        const array = JSON.parse(value);\n        if (!Array.isArray(array)) {\n            throw new TypeError(\"Expected array\");\n        }\n        return array;\n    },\n    boolean(value) {\n        return !(value == \"0\" || value == \"false\");\n    },\n    number(value) {\n        return Number(value);\n    },\n    object(value) {\n        const object = JSON.parse(value);\n        if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n            throw new TypeError(\"Expected object\");\n        }\n        return object;\n    },\n    string(value) {\n        return value;\n    }\n};\nconst writers = {\n    default: writeString,\n    array: writeJSON,\n    object: writeJSON\n};\nfunction writeJSON(value) {\n    return JSON.stringify(value);\n}\nfunction writeString(value) {\n    return `${value}`;\n}\n\nclass Controller {\n    constructor(context) {\n        this.context = context;\n    }\n    static get shouldLoad() {\n        return true;\n    }\n    get application() {\n        return this.context.application;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get targets() {\n        return this.scope.targets;\n    }\n    get classes() {\n        return this.scope.classes;\n    }\n    get data() {\n        return this.scope.data;\n    }\n    initialize() {\n    }\n    connect() {\n    }\n    disconnect() {\n    }\n    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {\n        const type = prefix ? `${prefix}:${eventName}` : eventName;\n        const event = new CustomEvent(type, { detail, bubbles, cancelable });\n        target.dispatchEvent(event);\n        return event;\n    }\n}\nController.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing];\nController.targets = [];\nController.values = {};\n\nexport { Application, AttributeObserver, Context, Controller, ElementObserver, IndexedMultimap, Multimap, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune };\n","export const kebabCase = string =>\n  string\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/[\\s_]+/g, \"-\")\n    .toLowerCase();\n\nexport const capitalize = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","const booleanOptions = [\n  'allowInput',\n  'altInput',\n  'animate',\n  'clickOpens',\n  'closeOnSelect',\n  'disableMobile',\n  'enableSeconds',\n  'enableTime',\n  'inline',\n  'noCalendar',\n  'shorthandCurrentMonth',\n  'static',\n  'time_24hr',\n  'weekNumbers',\n  'wrap'\n]\n\nconst stringOptions = [\n  'altInputClass',\n  'conjunction',\n  'mode',\n  'nextArrow',\n  'position',\n  'prevArrow',\n  'monthSelectorType'\n]\n\nconst numberOptions = [\n  'defaultHour',\n  'defaultMinute',\n  'defaultSeconds',\n  'hourIncrement',\n  'minuteIncrement',\n  'showMonths'\n]\n\nconst arrayOptions = ['disable', 'enable', 'disableDaysOfWeek', 'enableDaysOfWeek']\n\nconst arrayOrStringOptions = ['defaultDate']\n\nconst dateOptions = ['maxDate', 'minDate', 'maxTime', 'minTime', 'now']\n\nexport const dateFormats = ['altFormat', 'ariaDateFormat', 'dateFormat']\n\nexport const options = {\n  string: stringOptions,\n  boolean: booleanOptions,\n  date: dateOptions,\n  array: arrayOptions,\n  number: numberOptions,\n  arrayOrString: arrayOrStringOptions\n}\n","export const events = ['change', 'open', 'close', 'monthChange', 'yearChange', 'ready', 'valueUpdate', 'dayCreate']\n","export const elements = [\n  'calendarContainer',\n  'currentYearElement',\n  'days',\n  'daysContainer',\n  'input',\n  'nextMonthNav',\n  'monthNav',\n  'prevMonthNav',\n  'rContainer',\n  'selectedDateElem',\n  'todayDateElem',\n  'weekdayContainer'\n]\n","export const mapping = {\n  '%Y': 'Y',\n  '%y': 'y',\n  '%C': 'Y',\n  '%m': 'm',\n  '%-m': 'n',\n  '%_m': 'n',\n  '%B': 'F',\n  '%^B': 'F',\n  '%b': 'M',\n  '%^b': 'M',\n  '%h': 'M',\n  '%^h': 'M',\n  '%d': 'd',\n  '%-d': 'j',\n  '%e': 'j',\n  '%H': 'H',\n  '%k': 'H',\n  '%I': 'h',\n  '%l': 'h',\n  '%-l': 'h',\n  '%P': 'K',\n  '%p': 'K',\n  '%M': 'i',\n  '%S': 'S',\n  '%A': 'l',\n  '%a': 'D',\n  '%w': 'w'\n}\n\nconst strftimeRegex = new RegExp(\n  Object.keys(mapping)\n    .join('|')\n    .replace(new RegExp('\\\\^', 'g'), '\\\\^'),\n  'g'\n)\n\nexport const convertDateFormat = (format) => {\n  return format.replace(strftimeRegex, (match) => {\n    return mapping[match]\n  })\n}\n","import { Controller } from '@hotwired/stimulus'\nimport flatpickr from 'flatpickr'\nimport { kebabCase, capitalize } from './utils'\nimport { options, dateFormats } from './config_options'\nimport { events } from './events'\nimport { elements } from './elements'\nimport { convertDateFormat } from './strftime_mapping'\n\nclass StimulusFlatpickr extends Controller {\n  static targets = ['instance']\n\n  initialize() {\n    this.config = {}\n  }\n\n  connect() {\n    this._initializeEvents()\n    this._initializeOptions()\n    this._initializeDateFormats()\n\n    this.fp = flatpickr(this.flatpickrElement, {\n      ...this.config\n    })\n\n    this._initializeElements()\n  }\n\n  disconnect() {\n    const value = this.inputTarget.value\n    this.fp.destroy()\n    this.inputTarget.value = value\n  }\n\n  _initializeEvents() {\n    events.forEach((event) => {\n      if (this[event]) {\n        const hook = `on${capitalize(event)}`\n        this.config[hook] = this[event].bind(this)\n      }\n    })\n  }\n\n  _initializeOptions() {\n    Object.keys(options).forEach((optionType) => {\n      const optionsCamelCase = options[optionType]\n      optionsCamelCase.forEach((option) => {\n        const optionKebab = kebabCase(option)\n        if (this.data.has(optionKebab)) {\n          this.config[option] = this[`_${optionType}`](optionKebab)\n        }\n      })\n    })\n    this._handleDaysOfWeek()\n  }\n\n  _handleDaysOfWeek() {\n    if (this.config.disableDaysOfWeek) {\n      this.config.disableDaysOfWeek = this._validateDaysOfWeek(this.config.disableDaysOfWeek)\n      this.config.disable = [...(this.config.disable || []), this._disable.bind(this)]\n    }\n\n    if (this.config.enableDaysOfWeek) {\n      this.config.enableDaysOfWeek = this._validateDaysOfWeek(this.config.enableDaysOfWeek)\n      this.config.enable = [...(this.config.enable || []), this._enable.bind(this)]\n    }\n  }\n\n  _validateDaysOfWeek(days) {\n    if (Array.isArray(days)) {\n      return days.map((day) => parseInt(day))\n    } else {\n      console.error('days of week must be a valid array')\n      return []\n    }\n  }\n\n  _disable(date) {\n    const disabledDays = this.config.disableDaysOfWeek\n    return disabledDays.includes(date.getDay())\n  }\n\n  _enable(date) {\n    const enabledDays = this.config.enableDaysOfWeek\n    return enabledDays.includes(date.getDay())\n  }\n\n  _initializeDateFormats() {\n    dateFormats.forEach((dateFormat) => {\n      if (this.data.has(dateFormat)) {\n        this.config[dateFormat] = convertDateFormat(this.data.get(dateFormat))\n      }\n    })\n  }\n\n  _initializeElements() {\n    elements.forEach((element) => {\n      this[`${element}Target`] = this.fp[element]\n    })\n  }\n\n  _string(option) {\n    return this.data.get(option)\n  }\n\n  _date(option) {\n    return this.data.get(option)\n  }\n\n  _boolean(option) {\n    return !(this.data.get(option) == '0' || this.data.get(option) == 'false')\n  }\n\n  _array(option) {\n    return JSON.parse(this.data.get(option))\n  }\n\n  _number(option) {\n    return parseInt(this.data.get(option))\n  }\n\n  _arrayOrString(option) {\n    const val = this.data.get(option)\n    try {\n      return JSON.parse(val)\n    } catch (e) {\n      return val\n    }\n  }\n\n  get flatpickrElement() {\n    return (this.hasInstanceTarget && this.instanceTarget) || this.element\n  }\n}\n\nexport default StimulusFlatpickr\n"],"names":["camelize","value","replace","_","char","toUpperCase","capitalize","charAt","slice","dasherize","toLowerCase","readInheritableStaticArrayValues","constructor","propertyName","ancestors","getAncestorsForConstructor","Array","from","reduce","values","getOwnStaticArrayValues","forEach","name","add","Set","readInheritableStaticObjectPairs","pairs","push","getOwnStaticObjectPairs","Object","getPrototypeOf","reverse","definition","isArray","keys","map","key","extend","extendWithReflect","extended","Reflect","construct","arguments","new","target","prototype","create","setPrototypeOf","testReflectExtension","a","call","b","error","ClassPropertiesBlessing","classes","properties","classDefinition","assign","propertiesForClassDefinition","get","has","attribute","getAttributeName","Error","getAll","TargetPropertiesBlessing","targets","targetDefinition","propertiesForTargetDefinition","find","identifier","findAll","ValuePropertiesBlessing","valueDefinitionPairs","propertyDescriptorMap","valueDescriptorMap","result","valueDefinitionPair","valueDescriptor","parseValueDefinitionPair","attributeName","data","getAttributeNameForKey","propertiesForValueDefinitionPair","reader","read","writer","write","defaultValue","set","undefined","delete","hasCustomDefaultValue","token","typeDefinition","valueDescriptorForTokenAndTypeDefinition","parseValueTypeConstant","constant","Boolean","Number","String","parseValueTypeDefault","toString","parseValueTypeObject","typeObject","typeFromObject","type","defaultValueType","default","parseValueTypeDefinition","typeFromDefaultValue","typeFromConstant","defaultValueForDefinition","defaultValuesByType","readers","writers","array","boolean","number","object","string","JSON","parse","TypeError","writeString","writeJSON","stringify","Controller","context","shouldLoad","application","scope","element","initialize","connect","disconnect","dispatch","eventName","detail","prefix","bubbles","cancelable","event","CustomEvent","dispatchEvent","blessings","kebabCase","booleanOptions","stringOptions","numberOptions","arrayOptions","arrayOrStringOptions","dateOptions","dateFormats","options","date","arrayOrString","events","elements","mapping","strftimeRegex","RegExp","join","convertDateFormat","format","match","StimulusFlatpickr","config","_initializeEvents","_initializeOptions","_initializeDateFormats","fp","flatpickr","flatpickrElement","_initializeElements","inputTarget","destroy","hook","bind","optionType","optionsCamelCase","option","optionKebab","_handleDaysOfWeek","disableDaysOfWeek","_validateDaysOfWeek","disable","_disable","enableDaysOfWeek","enable","_enable","days","day","parseInt","console","disabledDays","includes","getDay","enabledDays","dateFormat","val","e","hasInstanceTarget","instanceTarget"],"mappings":"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"}